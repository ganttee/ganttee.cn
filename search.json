[{"categories":null,"content":"新版本的xlrd不支持读取xlsx的Excel文件了，那么只需要回退版本即可。 解决办法如下：\n1 2  pip uninstall xlrd pip install xlrd==1.2.0   ","description":"","tags":["python","xlrd","xlsx","excel"],"title":"Python Xlrd不支持xlsx","uri":"/posts/python-xlrd%E4%B8%8D%E6%94%AF%E6%8C%81xlsx/"},{"categories":["git"],"content":"1.创建一个空白的分支的需求 在Git中创建分支，是必须有一个父节点的，也就是说必须在已有的分支上来创建新的分支，如果工程已经进行了一段时间，这个时候是无法创建空分支的。但是有时候就是需要创建一个空白的分支。\n2.解决方法： 2.1 使用 git checkout的--orphan参数: git checkout --orphan emptybranch 该命令会生成一个叫emptybranch的分支，该分支会包含父分支的所有文件。但新的分支不会指向任何以前的提交，就是它没有历史，如果你提交当前内容，那么这次提交就是这个分支的首次提交。\n2.2 删除所有文件： 想要空分支，所以需要把当前内容全部删除，用git命令\ngit rm -rf . //注意：最后的‘.’不能少。 2.3 提交分支： 如果没有任何文件提交的话，分支是看不到的，所以我们需要创建一个新文件，然后提交则新创建的branch就会显示出来。\necho '# new branch' \u003e\u003e README.md git add README.md git commit -m 'new branch' 2.4 最后push到远程仓库，则新的空分支就创建成功了。 git push origin emptybranch 参考：https://www.jianshu.com/p/a18487d987ac\n","description":"","tags":["git"],"title":"Git创建一个空白的分支","uri":"/posts/git%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%A9%BA%E7%99%BD%E7%9A%84%E5%88%86%E6%94%AF/"},{"categories":["爬虫"],"content":"开源爬虫库很多，功能都差不多，比如大部分都不支持JS动态加载的页面:)，但是现在大部分网页都是JS动态加载的。后文以Python为例介绍几种支持JS动态加载网页的爬取方法。\n什么是网络爬虫？ 网络爬虫一般指通过技术抓取公开网站网页上数据。\n如何在爬虫时，支持JS动态加载的页面？ 定制开发---性能高但开发成本及灵活性低  原理: 定向分析所要爬取的网页，用Python模拟JS的行为\n 使用一些浏览器自动化框架/库来爬取站点---通用性高开发成本低且灵活但效率低  原理: 模拟浏览器处理JS。利用外部JS Engine执行JS，并获取其结果\n 1.Selenium WebDriver  Selenium 是一系列工具和库的综合项目，这些工具和库支持 web 浏览器的自动化。 WebDriver 以本地化方式驱动浏览器，就像用户在本地或使用 Selenium 服务器的远程机器上所做的那样，这标志着浏览器自动化的飞跃。 Selenium WebDriver 指的是语言绑定和各个浏览器控制代码的实现。 这通常被称为 WebDriver。\n Requestium\n2.dryscrape  dryscrape is a lightweight web scraping library for Python. It uses a headless Webkit instance to evaluate Javascript on the visited pages. This enables painless scraping of plain web pages as well as Javascript-heavy “Web 2.0” applications like Facebook. dryscrape 是一个轻量级的 Python 网页抓取库。它使用无头 Webkit 实例来评估访问页面上的 Javascript。这使得可以轻松抓取普通网页以及像 Facebook 这样的 Javascript 密集型“Web 2.0”应用程序。\n 1 2 3 4 5 6 7 8  def get_url_dynamic2(url): driver=webdriver.Firefox() #调用本地的火狐浏览器，Chrom 甚至 Ie 也可以的 driver.get(url) #请求页面，会打开一个浏览器窗口 html_text=driver.page_source driver.quit() #print html_text return html_text get_text_line(get_url_dynamic2(url)) #将输出一条文本   3.Splash  Splash is a javascript rendering service. It's a lightweight browser with an HTTP API, implemented in Python using Twisted and QT. Splash 是一个 javascript 渲染服务。它是一个带有 HTTP API 的轻量级浏览器，使用 Twisted 和 QT 在 Python 中实现。 最简单的使用方法是docker起一个Splash容器，然后调用Splash HTTP接口，详见官方说明。\n 1.Pull the image: $ sudo docker pull scrapinghub/splash 2.Start the container: $ sudo docker run -it -p 8050:8050 --rm scrapinghub/splash 3.Splash is now available at 0.0.0.0 at port 8050 (http). 4.Pyppeteer puppeteer JavaScript（无头）chrome/chromium 浏览器自动化库的非官方 Python 端口 具体用法见官方说明\n","description":"","tags":["爬虫","selenium","splash"],"title":"Python Spider Js Render","uri":"/posts/python-spider-js-render/"},{"categories":["web"],"content":" 最近做项目的时候，有前端WEB页面需求，自己就又码了前端😂，用了bootstrap。今天遇到一个坑，记录一下。\n html页面用bootstrap按钮组件的时候，每次按钮按下以后，页面会自动刷新，百思不得其解。折腾了半天，才发现是因为按钮的属性设置导致的。\n在bootstrap中，按钮的type要设置为button，如果不设置或者设置为submit都会在click事件后，触发自动刷新页面。 解决办法也一目了然了，将\n1  \u003cbutton type=\"submit\" class=\"btn btn-primary\" id=\"btn-play\"\u003e播放\u003c/button\u003e   改为\n1  \u003cbutton type=\"button\" class=\"btn btn-primary\" id=\"btn-play\"\u003e播放\u003c/button\u003e   即可。😊\n","description":"","tags":["web","bootstrap","html","button"],"title":"bootstrap中点击按钮会自动刷新页面","uri":"/posts/1/"},{"categories":null,"content":"// Todo ","description":"","tags":null,"title":"About","uri":"/about/"}]
